#ifndef _AES_H_
#define _AES_H_

#include <stdint.h>
#include <stddef.h>



#ifndef counter
  #define counter 1
#endif




struct ctx_aes
{
  uint8_t RKey[keyExp];
#if (defined(chaining) && (chaining == 1)) || (defined(counter) && (counter == 1))
  uint8_t Iv[AES_BLOCKLEN];
#endif
};

void AES_init_ctx(struct ctx_aes* ctx, const uint8_t* key);
#if (defined(chaining) && (chaining == 1)) || (defined(counter) && (counter == 1))
void AES_init_ctx_iv(struct ctx_aes* ctx, const uint8_t* key, const uint8_t* iv);
void ctx_aes_set_iv(struct ctx_aes* ctx, const uint8_t* iv);
#endif

#if defined(ECB) && (ECB == 1)
void AES_ECB_encrypt(const struct ctx_aes* ctx, uint8_t* buf);
void AES_ECB_decrypt(const struct ctx_aes* ctx, uint8_t* buf);

#endif


#if defined(chaining) && (chaining == 1)
void AES_chaining_encrypt_buffer(struct ctx_aes* ctx, uint8_t* buf, size_t length);
void AES_chaining_decrypt_buffer(struct ctx_aes* ctx, uint8_t* buf, size_t length);

#endif 


#if defined(counter) && (counter == 1)

void AES_counter_xcrypt_buffer(struct ctx_aes* ctx, uint8_t* buf, size_t length);

#endif 


#endif 
